From 781b5e1f9141ebebd8ef8e9748e0ed35a7c4381c Mon Sep 17 00:00:00 2001
From: lpgl05 <lpgl05@github.com>
Date: Mon, 29 Sep 2025 11:58:41 +0800
Subject: [PATCH 1/2] =?UTF-8?q?feat:=20=E4=BF=AE=E5=A4=8D=E6=89=B9?=
 =?UTF-8?q?=E9=87=8F=E4=B8=8B=E8=BD=BD=E5=8A=9F=E8=83=BD=EF=BC=8C=E6=94=AF?=
 =?UTF-8?q?=E6=8C=81=E4=B8=80=E9=94=AE=E4=B8=8B=E8=BD=BD=E6=89=80=E6=9C=89?=
 =?UTF-8?q?=E8=A7=86=E9=A2=91?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

- 修复HistoryPage组件中的一键下载按钮，支持批量下载历史记录中的所有视频
- 修复GenerationResult组件中的批量下载按钮，支持下载本次任务的所有视频
- 修复StepManager组件中的批量下载按钮，正确处理端口转换和下载参数
- 修复VideoMixer_v2组件中的白屏问题，确保视频数据正确显示
- 修复耗时显示问题，每个视频显示独立的生成时间
- 添加端口转换功能，自动将8000端口转换为9999端口
- 添加下载参数支持，自动添加&download=true参数
- 优化错误处理，添加类型检查和空值保护
---
 src/components/GenerationResult.tsx         | 174 +++++++++++++++---
 src/components/HistoryPage.tsx              | 186 ++++++++++----------
 src/components/new-ui/NewVideoGenerator.tsx |   2 +-
 src/components/new-ui/StepManager.tsx       |  45 +++--
 src/pages/VideoMixer.tsx                    |  18 +-
 src/pages/VideoMixer_v2.tsx                 |   4 +-
 src/services/api.ts                         |   7 +
 src/types/index.ts                          |   9 +-
 8 files changed, 297 insertions(+), 148 deletions(-)

diff --git a/src/components/GenerationResult.tsx b/src/components/GenerationResult.tsx
index a9624c5..25f392b 100644
--- a/src/components/GenerationResult.tsx
+++ b/src/components/GenerationResult.tsx
@@ -1,6 +1,6 @@
 import React, { useState, useEffect } from 'react'
-import { Progress, Button, message, Modal } from 'antd'
-import { PlayCircleOutlined, DownloadOutlined, EyeOutlined } from '@ant-design/icons'
+import { Progress, Button, message, Modal, Tooltip } from 'antd'
+import { PlayCircleOutlined, DownloadOutlined, ShareAltOutlined } from '@ant-design/icons'
 import type { GenerationTask } from '../types'
 import ReactPlayer from 'react-player'
 
@@ -78,13 +78,25 @@ const GenerationResult: React.FC<GenerationResultProps> = ({ task, onReset, onNe
   }
 
   const handlePreview = (url: string) => {
-    setPreviewVideo(url)
+    // 检查url是否为有效字符串
+    if (!url || typeof url !== "string") {
+      console.error("Invalid URL:", url);
+      message.error("视频URL无效，无法预览");
+      return;
+    }
+    setPreviewVideo(url.replace(":8000", ":9999"))
     setPreviewVisible(true)
   }
 
   const handleDownload = (url: string, index: number) => {
+    // 检查url是否为有效字符串
+    if (!url || typeof url !== "string") {
+      console.error("Invalid URL:", url);
+      message.error("视频URL无效，无法下载");
+      return;
+    }
     const link = document.createElement('a')
-    link.href = url
+    link.href = url.includes("oss-proxy") ? url.replace(":8000", ":9999") + "&download=true" : url
     link.download = `混剪视频_${index + 1}.mp4`
     document.body.appendChild(link)
     link.click()
@@ -92,11 +104,59 @@ const GenerationResult: React.FC<GenerationResultProps> = ({ task, onReset, onNe
     message.success('开始下载')
   }
 
+  // 批量下载所有视频
+  const handleBatchDownload = () => {
+    if (!task?.result?.videos || task.result.videos.length === 0) {
+      message.warning('没有可下载的视频');
+      return;
+    }
+
+    task.result.videos.forEach((video, index) => {
+      setTimeout(() => {
+        if (video.url) {
+          const link = document.createElement('a');
+          const downloadUrl = video.url.includes('oss-proxy') ? 
+            video.url.replace(':8000', ':9999') + '&download=true' : 
+            video.url;
+          link.href = downloadUrl;
+          link.download = `混剪视频_${index + 1}.mp4`;
+          document.body.appendChild(link);
+          link.click();
+          document.body.removeChild(link);
+        }
+      }, index * 500);
+    });
+
+    message.success(`开始批量下载 ${task.result.videos.length} 个视频文件`);
+  };
+
+  const handleShare = (url: string, index: number) => {
+    if (navigator.share) {
+      navigator.share({
+        title: `混剪视频 ${index + 1}`,
+        text: '查看我制作的精彩视频',
+        url: url
+      }).catch(() => {
+        // 如果分享失败，复制链接到剪贴板
+        navigator.clipboard.writeText(url).then(() => {
+          message.success('视频链接已复制到剪贴板')
+        })
+      })
+    } else {
+      // 不支持原生分享，复制链接到剪贴板
+      navigator.clipboard.writeText(url).then(() => {
+        message.success('视频链接已复制到剪贴板')
+      }).catch(() => {
+        message.error('复制失败，请手动复制链接')
+      })
+    }
+  }
+
   // 格式化耗时显示
-  const formatDuration = (durationMinutes?: number) => {
-    if (!durationMinutes) return null
+  const formatDuration = (durationSeconds?: number) => {
+    if (!durationSeconds) return null
     
-    const totalSeconds = Math.round(durationMinutes * 60)
+    const totalSeconds = Math.round(durationSeconds)
     const minutes = Math.floor(totalSeconds / 60)
     const seconds = totalSeconds % 60
     
@@ -109,7 +169,7 @@ const GenerationResult: React.FC<GenerationResultProps> = ({ task, onReset, onNe
 
   const getStatusText = (status: GenerationTask['status']) => {
     switch (status) {
-      case 'pending':
+      case 'queued':
         return '等待中'
       case 'processing':
         return '处理中'
@@ -124,7 +184,7 @@ const GenerationResult: React.FC<GenerationResultProps> = ({ task, onReset, onNe
 
   const getStatusColor = (status: GenerationTask['status']) => {
     switch (status) {
-      case 'pending':
+      case 'queued':
         return '#faad14'
       case 'processing':
         return '#1890ff'
@@ -196,11 +256,33 @@ const GenerationResult: React.FC<GenerationResultProps> = ({ task, onReset, onNe
             </div>
           )}
 
-          {task.status === 'completed' && task.result && (
+          {task.status === 'completed' && task.result && task.result.videos && task.result.videos.length > 0 && (
             <div>
               <div className="result-grid">
                 {task.result.videos.map((video, index) => (
-                  <div key={index} className="result-item">
+                  <div key={index} className="result-item" style={{ position: 'relative' }}>
+                    {/* 右上角分享按钮 - 已隐藏 */}
+                    {/* <Tooltip title="分享视频">
+                      <Button
+                        type="primary"
+                        shape="circle"
+                        icon={<ShareAltOutlined />}
+                        onClick={() => handleShare(video.url, index)}
+                        style={{
+                          position: 'absolute',
+                          top: '12px',
+                          right: '12px',
+                          zIndex: 10,
+                          width: '36px',
+                          height: '36px',
+                          backgroundColor: '#1890ff',
+                          border: '2px solid #ffffff',
+                          boxShadow: '0 4px 12px rgba(24, 144, 255, 0.4)',
+                          color: '#ffffff'
+                        }}
+                      />
+                    </Tooltip> */}
+                    
                     <div style={{ 
                       width: '100%', 
                       height: '200px', 
@@ -208,34 +290,73 @@ const GenerationResult: React.FC<GenerationResultProps> = ({ task, onReset, onNe
                       display: 'flex',
                       alignItems: 'center',
                       justifyContent: 'center',
-                      cursor: 'pointer'
+                      cursor: 'pointer',
+                      position: 'relative',
+                      overflow: 'hidden'
                     }} onClick={() => handlePreview(video.url)}>
                       <PlayCircleOutlined style={{ fontSize: '48px', color: '#1890ff' }} />
+                      <div style={{
+                        position: 'absolute',
+                        bottom: '8px',
+                        left: '8px',
+                        right: '8px',
+                        background: 'rgba(0, 0, 0, 0.6)',
+                        color: 'white',
+                        padding: '4px 8px',
+                        borderRadius: '4px',
+                        fontSize: '12px',
+                        textAlign: 'center'
+                      }}>
+                        点击预览视频
+                      </div>
                     </div>
                     <div className="result-info">
                       <div className="result-title">混剪视频 {index + 1}</div>
                       <div className="result-meta">
                         生成时间: {new Date(task.updatedAt).toLocaleString()}
                       </div>
-                      {task.processing_time && (
+                      {video.processing_time && (
                         <div className="result-meta" style={{ color: '#1890ff', fontWeight: '500' }}>
-                          耗时: {formatDuration(task.processing_time)}
+                          耗时: {formatDuration(video.processing_time)}
                         </div>
                       )}
-                      <div style={{ marginTop: '8px', display: 'flex', gap: '8px' }}>
+                      <div style={{ 
+                        marginTop: '16px', 
+                        display: 'flex', 
+                        gap: '12px',
+                        justifyContent: 'center'
+                      }}>
                         <Button
-                          size="small"
-                          icon={<EyeOutlined />}
+                          type="primary"
+                          size="large"
                           onClick={() => handlePreview(video.url)}
+                          style={{
+                            flex: 1,
+                            height: '40px',
+                            borderRadius: '8px',
+                            fontWeight: '600',
+                            fontSize: '16px',
+                            backgroundColor: '#1890ff',
+                            borderColor: '#1890ff'
+                          }}
                         >
-                          预览
+                          🎥 预览视频
                         </Button>
                         <Button
-                          size="small"
-                          icon={<DownloadOutlined />}
-                          onClick={() => handleDownload(video, index)}
+                          size="large"
+                          onClick={() => handleDownload(video.url, index)}
+                          style={{
+                            flex: 1,
+                            height: '40px',
+                            borderRadius: '8px',
+                            fontWeight: '600',
+                            fontSize: '16px',
+                            borderColor: '#52c41a',
+                            color: '#52c41a',
+                            backgroundColor: '#f6ffed'
+                          }}
                         >
-                          下载
+                          📥 下载视频
                         </Button>
                       </div>
                     </div>
@@ -259,6 +380,13 @@ const GenerationResult: React.FC<GenerationResultProps> = ({ task, onReset, onNe
                 >
                   查看原配置
                 </Button>
+                <Button 
+                  icon={<DownloadOutlined />}
+                  onClick={handleBatchDownload}
+                  style={{ minWidth: '120px' }}
+                >
+                  批量下载
+                </Button>
                 <Button 
                   onClick={onNewCreation}
                   style={{ minWidth: '120px' }}
@@ -291,4 +419,4 @@ const GenerationResult: React.FC<GenerationResultProps> = ({ task, onReset, onNe
   )
 }
 
-export default GenerationResult 
\ No newline at end of file
+export default GenerationResult
diff --git a/src/components/HistoryPage.tsx b/src/components/HistoryPage.tsx
index c15d8bc..988a470 100644
--- a/src/components/HistoryPage.tsx
+++ b/src/components/HistoryPage.tsx
@@ -6,7 +6,8 @@ import {
   Tag, 
   Space, 
   Empty,
-  Avatar
+  Avatar,
+  message
 } from 'antd'
 import { 
   VideoCameraOutlined,
@@ -24,6 +25,32 @@ interface HistoryPageProps {
 }
 
 const HistoryPage: React.FC<HistoryPageProps> = ({ projectHistory = [], onViewProject }) => {
+  // 批量一键下载所有视频
+  const handleBatchDownload = (historyItem: ProjectHistory) => {
+    if (!historyItem.videos || historyItem.videos.length === 0) {
+      message.warning('该记录没有可下载的视频');
+      return;
+    }
+
+    historyItem.videos.forEach((video, index) => {
+      setTimeout(() => {
+        if (video.url) {
+          const link = document.createElement('a');
+          const downloadUrl = video.url.includes('oss-proxy') ? 
+            video.url.replace(':8000', ':9999') + '&download=true' : 
+            video.url;
+          link.href = downloadUrl;
+          link.download = `${historyItem.name}_视频${index + 1}.mp4`;
+          document.body.appendChild(link);
+          link.click();
+          document.body.removeChild(link);
+        }
+      }, index * 500);
+    });
+
+    message.success(`开始批量下载 ${historyItem.videos.length} 个视频文件`);
+  };
+
   const getStatusColor = (status: string) => {
     switch (status) {
       case 'completed': return 'success'
@@ -50,106 +77,79 @@ const HistoryPage: React.FC<HistoryPageProps> = ({ projectHistory = [], onViewPr
       default: return null
     }
   }
-  // 格式化耗时显示
-  const formatDuration = (durationMinutes?: number) => {
-    if (!durationMinutes) return null
-    
-    const totalSeconds = Math.round(durationMinutes)
-    const minutes = Math.floor(totalSeconds / 60)
-    const seconds = totalSeconds % 60
-    
-    if (minutes > 0) {
-      return `${minutes}分钟${seconds}秒`
-    } else {
-      return `${seconds}秒`
-    }
+
+  const formatDate = (dateString: string) => {
+    return new Date(dateString).toLocaleString('zh-CN')
+  }
+
+  const formatDuration = (seconds?: number) => {
+    if (!seconds) return '未知'
+    const minutes = Math.floor(seconds / 60)
+    const remainingSeconds = seconds % 60
+    return `${minutes}分钟${remainingSeconds}秒`
   }
 
-  if (projectHistory.length === 0) {
+  if (!projectHistory || projectHistory.length === 0) {
     return (
-      <Card>
-        <Empty 
-          description="暂无历史记录"
-          image={Empty.PRESENTED_IMAGE_SIMPLE}
-        >
-          <Button type="primary" onClick={() => window.location.reload()}>
-            开始创建视频
-          </Button>
-        </Empty>
+      <Card title="历史记录">
+        <Empty description="暂无历史记录" />
       </Card>
     )
   }
-  console.log('projectHistory:', projectHistory);
 
   return (
-    <div style={{ padding: '24px' }}>
-      <Card 
-        title={
-          <Space>
-            <VideoCameraOutlined />
-            历史记录 ({projectHistory.length})
-          </Space>
-        }
-        style={{ maxWidth: '100%' }}
-      >
-        <List
-          itemLayout="horizontal"
-          dataSource={projectHistory}
-          renderItem={item => (
-            <List.Item
-              actions={[
-                item.status === 'completed' && (
-                  <Button 
-                    type="link" 
-                    icon={<EyeOutlined />}
-                    onClick={() => onViewProject?.(item)}
-                  >
-                    查看
-                  </Button>
-                ),
-                item.status === 'completed' && (
-                  <Button type="link" icon={<DownloadOutlined />}>下载</Button>
-                ),
-                item.status === 'failed' && (
-                  <Button type="link">重试</Button>
-                )
-              ].filter(Boolean)}
-            >
-              <List.Item.Meta
-                avatar={<Avatar icon={<VideoCameraOutlined />} />}
-                title={
-                  <Space>
-                    {item.name}
-                    <Tag color={getStatusColor(item.status)} icon={getStatusIcon(item.status)}>
-                      {getStatusText(item.status)}
-                    </Tag>
-                  </Space>
-                }
-                description={
-                  <Space direction="vertical" size="small">
-                    <div>创建时间: {item.createdAt}</div>
-                    {item.completedAt && <div>完成时间: {item.completedAt}</div>}
-                    {(item.task?.result?.processing_time || item.task?.processing_time) && (
-                      <div>
-                        <span style={{ color: '#1890ff', fontWeight: '500' }}>
-                          生成耗时: {formatDuration((item.task.result?.processing_time || item.task.processing_time))}
-                        </span>
-                      </div>
-                    )}
-                    <div>
-                      <Space>
-                        <span>视频数量: {item.videoCount}</span>
-                        <span>时长: {item.duration}</span>
-                      </Space>
-                    </div>
-                  </Space>
-                }
-              />
-            </List.Item>
-          )}
-        />
-      </Card>
-    </div>
+    <Card title={`历史记录 (${projectHistory.length})`}>
+      <List
+        dataSource={projectHistory}
+        renderItem={(item) => (
+          <List.Item
+            actions={[
+              item.status === 'completed' && (
+                <Button 
+                  type="link" 
+                  icon={<EyeOutlined />}
+                  onClick={() => onViewProject?.(item)}
+                >
+                  查看
+                </Button>
+              ),
+              item.status === 'completed' && (
+                <Button 
+                  type="link" 
+                  icon={<DownloadOutlined />}
+                  onClick={() => handleBatchDownload(item)}
+                >
+                  一键下载
+                </Button>
+              ),
+              item.status === 'failed' && (
+                <Button type="link">重试</Button>
+              )
+            ].filter(Boolean)}
+          >
+            <List.Item.Meta
+              avatar={<Avatar icon={<VideoCameraOutlined />} />}
+              title={
+                <Space>
+                  <span>{item.name}</span>
+                  <Tag color={getStatusColor(item.status)} icon={getStatusIcon(item.status)}>
+                    {getStatusText(item.status)}
+                  </Tag>
+                </Space>
+              }
+              description={
+                <div>
+                  <div>创建时间: {formatDate(item.createdAt)}</div>
+                  {item.completedAt && <div>完成时间: {formatDate(item.completedAt)}</div>}
+                  {item.processingTime && <div>生成耗时: {formatDuration(item.processingTime)}</div>}
+                  <div>视频数量: {item.videoCount} 时长: {item.duration}</div>
+                </div>
+              }
+            />
+          </List.Item>
+        )}
+      />
+    </Card>
   )
 }
 
diff --git a/src/components/new-ui/NewVideoGenerator.tsx b/src/components/new-ui/NewVideoGenerator.tsx
index 91c23ec..649c2d5 100644
--- a/src/components/new-ui/NewVideoGenerator.tsx
+++ b/src/components/new-ui/NewVideoGenerator.tsx
@@ -477,7 +477,7 @@ const NewVideoGenerator: React.FC = () => {
       };
 
       setGeneratedVideo(mockVideo);
-      message.success('视频生成完成！');
+      // message.success('视频生成完成！'); // 已注释，避免重复提示
     } catch (error) {
       message.error('视频生成失败，请重试');
     } finally {
diff --git a/src/components/new-ui/StepManager.tsx b/src/components/new-ui/StepManager.tsx
index f359a66..a0fe9d4 100644
--- a/src/components/new-ui/StepManager.tsx
+++ b/src/components/new-ui/StepManager.tsx
@@ -220,9 +220,9 @@ const StepManager: React.FC<StepManagerProps> = ({
         style: style
       };
       
-      console.log('🎙️ StepManager生成项目配置:', { voiceType, voice: voiceType || 'female' });
+      console.log('🎙️ StepManager生成项目配置:', { voiceType, voice: voiceType || 'female', voiceSpeed: templateParams?.voiceSpeed });
       
-      const savedProject = await saveProject(project, voiceType, templateParams, selectedTemplate?.id);
+      const savedProject = await saveProject(project, voiceType, templateParams?.voiceSpeed, templateParams, selectedTemplate?.id);
       console.log('✅ 项目配置已保存:', savedProject);
 
       // 2. 启动生成任务
@@ -297,7 +297,10 @@ const StepManager: React.FC<StepManagerProps> = ({
             // 检查是否所有视频都完成了
             const totalVideos = scripts.filter(s => s.selected).length;
             if (newVideos.length >= totalVideos) {
-              message.success('视频生成完成！');
+              // 只在第一次完成时显示toast，避免重复提示
+              if (generatedVideos.length < totalVideos) {
+                message.success('视频生成完成！');
+              }
               
               // 添加到历史记录
               if (onAddToHistory) {
@@ -661,33 +664,35 @@ const StepManager: React.FC<StepManagerProps> = ({
                         style={{
                           flex: 1,
                           padding: '10px 16px',
-                          border: '1px solid #1890ff',
+                          border: '2px solid #1890ff',
                           borderRadius: '6px',
-                          backgroundColor: '#1890ff',
-                          color: 'white',
+                          backgroundColor: '#ffffff',
+                          color: '#1890ff',
                           cursor: 'pointer',
                           fontSize: '14px',
-                          fontWeight: '500',
+                          fontWeight: '600',
                           transition: 'all 0.3s ease',
                           boxShadow: '0 2px 4px rgba(24, 144, 255, 0.2)'
                         }}
                         onMouseEnter={(e) => {
-                          e.currentTarget.style.backgroundColor = '#40a9ff';
+                          e.currentTarget.style.backgroundColor = '#1890ff';
+                          e.currentTarget.style.color = '#ffffff';
                           e.currentTarget.style.boxShadow = '0 4px 8px rgba(24, 144, 255, 0.3)';
                         }}
                         onMouseLeave={(e) => {
-                          e.currentTarget.style.backgroundColor = '#1890ff';
+                          e.currentTarget.style.backgroundColor = '#ffffff';
+                          e.currentTarget.style.color = '#1890ff';
                           e.currentTarget.style.boxShadow = '0 2px 4px rgba(24, 144, 255, 0.2)';
                         }}
                       >
-                        📺 预览
+                        🎥 预览视频
                       </button>
                       <button 
                         onClick={(e) => {
                           e.stopPropagation();
                           if (video.url) {
                             const link = document.createElement('a');
-                            link.href = video.url;
+                            const downloadUrl = video.url.includes("oss-proxy") ? video.url.replace(":8000", ":9999") + "&download=true" : video.url; link.href = downloadUrl;
                             link.download = `${video.name}.mp4`;
                             document.body.appendChild(link);
                             link.click();
@@ -697,26 +702,28 @@ const StepManager: React.FC<StepManagerProps> = ({
                         style={{
                           flex: 1,
                           padding: '10px 16px',
-                          border: '1px solid #52c41a',
+                          border: '2px solid #52c41a',
                           borderRadius: '6px',
-                          backgroundColor: '#52c41a',
-                          color: 'white',
+                          backgroundColor: '#ffffff',
+                          color: '#52c41a',
                           cursor: 'pointer',
                           fontSize: '14px',
-                          fontWeight: '500',
+                          fontWeight: '600',
                           transition: 'all 0.3s ease',
                           boxShadow: '0 2px 4px rgba(82, 196, 26, 0.2)'
                         }}
                         onMouseEnter={(e) => {
-                          e.currentTarget.style.backgroundColor = '#73d13d';
+                          e.currentTarget.style.backgroundColor = '#52c41a';
+                          e.currentTarget.style.color = '#ffffff';
                           e.currentTarget.style.boxShadow = '0 4px 8px rgba(82, 196, 26, 0.3)';
                         }}
                         onMouseLeave={(e) => {
-                          e.currentTarget.style.backgroundColor = '#52c41a';
+                          e.currentTarget.style.backgroundColor = '#ffffff';
+                          e.currentTarget.style.color = '#52c41a';
                           e.currentTarget.style.boxShadow = '0 2px 4px rgba(82, 196, 26, 0.2)';
                         }}
                       >
-                        📥 下载
+                        📥 下载视频
                       </button>
                     </div>
                   </div>
@@ -818,7 +825,7 @@ const StepManager: React.FC<StepManagerProps> = ({
                     setTimeout(() => {
                       if (video.url) {
                         const link = document.createElement('a');
-                        link.href = video.url;
+                        const downloadUrl = video.url.includes("oss-proxy") ? video.url.replace(":8000", ":9999") + "&download=true" : video.url; link.href = downloadUrl;
                         link.download = `${video.name}.mp4`;
                         document.body.appendChild(link);
                         link.click();
diff --git a/src/pages/VideoMixer.tsx b/src/pages/VideoMixer.tsx
index 9db1be0..83425d6 100644
--- a/src/pages/VideoMixer.tsx
+++ b/src/pages/VideoMixer.tsx
@@ -216,7 +216,7 @@ const VideoMixer: React.FC = () => {
         style,
       }
 
-      const savedProject = await saveProject(project, voice, {}, undefined)
+      const savedProject = await saveProject(project, voice, 1.0, {}, undefined)
 
       // 2. 立即启动生成任务（不等待完成）
       const task = await startGeneration(savedProject.id)
@@ -387,10 +387,10 @@ const VideoMixer: React.FC = () => {
             // 恢复项目配置并查看结果
             const { project, task } = historyItem
             setProjectName(project.name)
-            setVideos(project.videos)
-            setAudios(project.audios)
-            setPosters(project.posters)
-            setScripts(project.scripts)
+            setVideos(project.videos || [])
+            setAudios(project.audios || [])
+            setPosters(project.posters || [])
+            setScripts(project.scripts || [])
             setDuration(project.duration)
             setVideoCount(project.videoCount)
             setVoice(project.voice)
@@ -422,10 +422,10 @@ const VideoMixer: React.FC = () => {
             // 恢复项目配置并查看结果
             const { project, task } = historyItem
             setProjectName(project.name)
-            setVideos(project.videos)
-            setAudios(project.audios)
-            setPosters(project.posters)
-            setScripts(project.scripts)
+            setVideos(project.videos || [])
+            setAudios(project.audios || [])
+            setPosters(project.posters || [])
+            setScripts(project.scripts || [])
             setDuration(project.duration)
             setVideoCount(project.videoCount)
             setVoice(project.voice)
diff --git a/src/pages/VideoMixer_v2.tsx b/src/pages/VideoMixer_v2.tsx
index cb87bf6..91cfc4f 100644
--- a/src/pages/VideoMixer_v2.tsx
+++ b/src/pages/VideoMixer_v2.tsx
@@ -127,7 +127,7 @@ const VideoMixer: React.FC = () => {
       completedAt: task.status === 'completed' ? updatedAtStr : undefined,
       videoCount: project.videoCount,
       duration: project.duration,
-      videos: task.result?.videos ? task.generatedVideos : undefined,
+      videos: task.result?.videos ? task.generatedVideos : [],
       project,
       task
     }
@@ -216,7 +216,7 @@ const VideoMixer: React.FC = () => {
         style,
       }
 
-      const savedProject = await saveProject(project, voice, {}, undefined)
+      const savedProject = await saveProject(project, voice, 1.0, {}, undefined)
 
       // 2. 立即启动生成任务（不等待完成）
       const task = await startGeneration(savedProject.id)
diff --git a/src/services/api.ts b/src/services/api.ts
index d84af19..d764287 100644
--- a/src/services/api.ts
+++ b/src/services/api.ts
@@ -422,6 +422,7 @@ export const generateScripts = async (
 export const saveProject = async (
   config: Omit<ProjectConfig, 'id' | 'createdAt' | 'updatedAt'>, 
   voiceType?: string,
+  voiceSpeed?: number,
   templateParams?: any,
   templateId?: string,
   portraitMode?: string
@@ -435,6 +436,12 @@ export const saveProject = async (
     console.log('🎙️ saveProject: 设置voice字段为:', voiceType);
   }
   
+  // 🚀 将voiceSpeed赋值给voiceSpeed字段
+  if (voiceSpeed !== undefined) {
+    body.voiceSpeed = voiceSpeed;
+    console.log('🎙️ saveProject: 设置voiceSpeed字段为:', voiceSpeed);
+  }
+  
   // 🎨 添加模板参数
   if (templateParams) {
     body.templateParams = templateParams;
diff --git a/src/types/index.ts b/src/types/index.ts
index 2cf4eb6..d4224b0 100644
--- a/src/types/index.ts
+++ b/src/types/index.ts
@@ -44,6 +44,9 @@ export type DurationOption = '15s' | '30s' | '30-60s';
 // 语音朗读选项
 export type VoiceOption = 'male' | 'female';
 
+// 语速选项
+export type VoiceSpeedOption = number; // 0.5 - 2.0
+
 // 字体样式配置
 export interface FontStyle {
   color: string;
@@ -137,6 +140,7 @@ export interface ProjectConfig {
   duration: DurationOption;
   videoCount: number;
   voice: VoiceOption;
+  voiceSpeed: VoiceSpeedOption;
   style: StyleConfig;
   createdAt: Date;
   updatedAt: Date;
@@ -152,7 +156,10 @@ export interface GenerationTask {
   status: 'queued' | 'processing' | 'completed' | 'failed';  // 确保包含 queued 状态
   progress: number;
   result?: {
-    videos: string[];
+    videos: Array<{
+      url: string;
+      processing_time?: number;
+    }>;
     previewUrl?: string;
   };
   error?: string;
-- 
2.43.7

