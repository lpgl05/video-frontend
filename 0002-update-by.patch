From 5ee99d8cfd903fa4e06e07ddabf6f1bfbe0c2737 Mon Sep 17 00:00:00 2001
From: lpgl05 <lpgl05@github.com>
Date: Mon, 29 Sep 2025 21:24:13 +0800
Subject: [PATCH 2/2] =?UTF-8?q?update=20-by=20=E9=BE=99?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 src/components/new-ui/GenerateControl.tsx |  10 +-
 src/components/new-ui/MaterialLibrary.tsx |  67 ++++++++++---
 src/components/new-ui/StepManager.tsx     | 114 +++++++++++++---------
 3 files changed, 125 insertions(+), 66 deletions(-)

diff --git a/src/components/new-ui/GenerateControl.tsx b/src/components/new-ui/GenerateControl.tsx
index 330e27d..68bdf19 100644
--- a/src/components/new-ui/GenerateControl.tsx
+++ b/src/components/new-ui/GenerateControl.tsx
@@ -1,6 +1,6 @@
 import React from 'react';
 import { Button, Progress, Card, Space, message } from 'antd';
-import { PlayCircleOutlined, DownloadOutlined, ShareAltOutlined } from '@ant-design/icons';
+import { PlayCircleOutlined, DownloadOutlined } from '@ant-design/icons';
 
 interface GeneratedVideo {
   id: string;
@@ -140,13 +140,7 @@ const GenerateControl: React.FC<GenerateControlProps> = ({
                 >
                   下载视频
                 </Button>
-                <Button
-                  icon={<ShareAltOutlined />}
-                  onClick={() => handleShare(generatedVideo)}
-                  size="large"
-                >
-                  分享视频
-                </Button>
+                {/* 分享功能暂时隐藏 */}
               </Space>
             </div>
           </Card>
diff --git a/src/components/new-ui/MaterialLibrary.tsx b/src/components/new-ui/MaterialLibrary.tsx
index cf98009..3e8cc9d 100644
--- a/src/components/new-ui/MaterialLibrary.tsx
+++ b/src/components/new-ui/MaterialLibrary.tsx
@@ -56,16 +56,22 @@ const MaterialLibrary: React.FC<MaterialLibraryProps> = ({
       if (response.ok) {
         const data = await response.json();
         // 转换后端数据格式为前端Material接口格式
-        const formattedMaterials = data.map((item: any) => ({
-          id: item.id,
-          name: item.name,
-          url: item.url,
-          type: item.type,
-          uploadDate: item.uploadedAt,
-          size: item.size,
-          duration: item.duration,
-          thumbnail: item.thumbnail
-        }));
+        const formattedMaterials = data.map((item: any) => {
+          const url: string = item.url || '';
+          const fallbackName = url ? decodeURIComponent(url.split('/').pop() || '') : '';
+          const name: string = item.name || fallbackName || '未命名素材';
+          const uploadedAt: string = item.uploadedAt || item.createdAt || item.uploadDate || '';
+          return {
+            id: item.id,
+            name,
+            url,
+            type: item.type,
+            uploadDate: uploadedAt,
+            size: item.size,
+            duration: item.duration,
+            thumbnail: item.thumbnail
+          } as Material;
+        });
         setMaterials(formattedMaterials);
         console.log('成功获取素材列表:', formattedMaterials.length, '个素材');
         
@@ -152,6 +158,18 @@ const MaterialLibrary: React.FC<MaterialLibraryProps> = ({
         if (result.success) {
           // 重新加载素材列表以获取最新的素材
           await loadMaterials();
+          // 上传后默认选中：优先使用返回的id，否则按文件名匹配
+          try {
+            if (result.id) {
+              onMaterialSelect(type, String(result.id), true);
+            } else {
+              const uploadedName = file.name;
+              const sameName = materials.find(m => m.type === type && (m.name === uploadedName || (m.url && decodeURIComponent(m.url.split('/').pop() || '') === uploadedName)));
+              if (sameName) {
+                onMaterialSelect(type, sameName.id, true);
+              }
+            }
+          } catch (_) {}
           message.success('素材上传成功！');
         } else {
           message.error(result.error || '上传失败，请重试');
@@ -234,8 +252,9 @@ const MaterialLibrary: React.FC<MaterialLibraryProps> = ({
       <Card
         hoverable
         className={`material-card ${isSelected ? 'selected' : ''}`}
+        onClick={() => onMaterialSelect(material.type, material.id, !isSelected)}
         cover={
-          <div className="material-preview" onClick={() => handlePreview(material)}>
+          <div className="material-preview" onClick={(e) => { e.stopPropagation(); handlePreview(material); }}>
             {material.type === 'poster' && material.url ? (
               // 海报显示缩略图
               <img 
@@ -337,7 +356,12 @@ const MaterialLibrary: React.FC<MaterialLibraryProps> = ({
           title={material.name}
           description={
             <div>
-              <div>上传时间：{new Date(material.uploadDate).toLocaleDateString()}</div>
+              <div>
+                上传时间：{isNaN(Date.parse(material.uploadDate)) ? '-' : new Date(material.uploadDate).toLocaleString()}
+              </div>
+              {typeof material.size === 'number' && (
+                <div>大小：{(material.size / 1024 / 1024).toFixed(2)}MB</div>
+              )}
               {material.duration && <div>时长：{material.duration}秒</div>}
             </div>
           }
@@ -355,11 +379,29 @@ const MaterialLibrary: React.FC<MaterialLibraryProps> = ({
     
     // 获取当前类型的上传进度
     const currentUploads = Object.keys(uploadingFiles).filter(key => key.startsWith(type));
+    const allIds = typeMaterials.map(m => m.id);
+    const selectedIds = selectedMaterials[type + 's' as keyof typeof selectedMaterials] as string[];
+    const isAllSelected = allIds.length > 0 && allIds.every(id => selectedIds.includes(id));
+    const toggleSelectAll = () => {
+      if (isAllSelected) {
+        allIds.forEach(id => onMaterialSelect(type, id, false));
+      } else {
+        allIds.forEach(id => onMaterialSelect(type, id, true));
+      }
+    };
     
     return (
       <div className="material-section">
         <div className="section-header">
           <h4>{title}</h4>
+          <Space>
+            <Button 
+              size="small"
+              onClick={toggleSelectAll}
+              style={{ height: '28px', fontSize: '12px' }}
+            >
+              {isAllSelected ? '取消全选' : '全选'}
+            </Button>
           <Upload
             multiple
             accept={type === 'video' ? 'video/*' : type === 'audio' ? 'audio/*' : 'image/*'}
@@ -381,6 +423,7 @@ const MaterialLibrary: React.FC<MaterialLibraryProps> = ({
               上传{title}
             </Button>
           </Upload>
+          </Space>
         </div>
         
         {/* 上传进度条 */}
diff --git a/src/components/new-ui/StepManager.tsx b/src/components/new-ui/StepManager.tsx
index a0fe9d4..297c9d6 100644
--- a/src/components/new-ui/StepManager.tsx
+++ b/src/components/new-ui/StepManager.tsx
@@ -108,6 +108,8 @@ const StepManager: React.FC<StepManagerProps> = ({
   
   const [currentTask, setCurrentTask] = useState<any>(null);
   const [pollingInterval, setPollingInterval] = useState<NodeJS.Timeout | null>(null);
+  // 防止重复弹出“视频生成完成！”的提示
+  const [hasShownCompleteToast, setHasShownCompleteToast] = useState<boolean>(false);
   const [previewVisible, setPreviewVisible] = useState(false);
   const [previewVideo, setPreviewVideo] = useState<string>('');
   const [totalGenerationTime, setTotalGenerationTime] = useState<number>(0);
@@ -233,7 +235,12 @@ const StepManager: React.FC<StepManagerProps> = ({
       // 3. 进入第三步
       setCurrentStep(2);
       
-      // 4. 开始轮询任务状态
+      // 4. 开始轮询任务状态（启动前清理旧的轮询，并重置完成提示状态）
+      if (pollingInterval) {
+        clearInterval(pollingInterval);
+        setPollingInterval(null);
+      }
+      setHasShownCompleteToast(false);
       startPolling(task.id);
       
       message.success('视频生成任务已启动，请稍候...');
@@ -298,8 +305,9 @@ const StepManager: React.FC<StepManagerProps> = ({
             const totalVideos = scripts.filter(s => s.selected).length;
             if (newVideos.length >= totalVideos) {
               // 只在第一次完成时显示toast，避免重复提示
-              if (generatedVideos.length < totalVideos) {
-                message.success('视频生成完成！');
+              if (!hasShownCompleteToast) {
+                message.success({ key: 'gen_done', content: '视频生成完成！', duration: 3 });
+                setHasShownCompleteToast(true);
               }
               
               // 添加到历史记录
@@ -322,6 +330,10 @@ const StepManager: React.FC<StepManagerProps> = ({
           setGenerationProgress(100);
           clearInterval(interval);
           setPollingInterval(null);
+          if (!hasShownCompleteToast) {
+            message.success({ key: 'gen_done', content: '视频生成完成！', duration: 3 });
+            setHasShownCompleteToast(true);
+          }
         }
         
         // 如果任务失败
@@ -466,28 +478,58 @@ const StepManager: React.FC<StepManagerProps> = ({
                 📹 视频生成进度
               </h3>
               
-              {/* 总耗时统计 */}
+              {/* 顶部信息条（合并完成提示与总耗时） */}
               {generationStartTime && (
                 <div style={{
                   marginBottom: '20px',
-                  padding: '12px 16px',
+                  padding: '6px 16px',
                   backgroundColor: '#f0f5ff',
                   border: '1px solid #d6e4ff',
                   borderRadius: '8px',
-                  textAlign: 'center'
+                  position: 'relative',
+                  height: '36px',
+                  overflow: 'hidden'
                 }}>
-                  <div style={{ 
-                    fontSize: '16px', 
-                    fontWeight: '500',
-                    color: '#1d39c4'
-                  }}>
-                    🕒 总耗时: {formatTime(totalGenerationTime)}
-                  </div>
+                  {generationProgress === 100 && generatedVideos.length > 0 ? (
+                    <>
+                      <div style={{
+                        position: 'absolute',
+                        left: '50%',
+                        top: '50%',
+                        transform: 'translate(-50%, -50%)',
+                        color: '#1677ff',
+                        fontWeight: 600
+                      }}>
+                        🎆 所有视频已生成，您可以开始预览和下载
+                      </div>
+                      <div style={{
+                        position: 'absolute',
+                        right: '12px',
+                        top: '50%',
+                        transform: 'translateY(-50%)',
+                        color: '#595959'
+                      }}>
+                        总耗时: {formatTime(totalGenerationTime)}
+                      </div>
+                    </>
+                  ) : (
+                    <div style={{
+                      position: 'absolute',
+                      right: '12px',
+                      top: '50%',
+                      transform: 'translateY(-50%)',
+                      color: '#1d39c4',
+                      fontWeight: 500
+                    }}>
+                      🕒 总耗时: {formatTime(totalGenerationTime)}
+                    </div>
+                  )}
                 </div>
               )}
 
               {/* 进度条 */}
               <div style={{ marginBottom: '30px' }}>
+                {/* 完成提示已并入顶部信息条，这里不再重复显示 */}
                 <div style={{ 
                   display: 'flex', 
                   justifyContent: 'space-between', 
@@ -535,22 +577,7 @@ const StepManager: React.FC<StepManagerProps> = ({
                     position: 'relative',
                     overflow: 'hidden'
                   }}>
-                    {/* 完成状态指示器 */}
-                    <div style={{
-                      position: 'absolute',
-                      top: '16px',
-                      right: '16px',
-                      width: '32px',
-                      height: '32px',
-                      borderRadius: '50%',
-                      backgroundColor: '#52c41a',
-                      display: 'flex',
-                      alignItems: 'center',
-                      justifyContent: 'center',
-                      boxShadow: '0 2px 8px rgba(82, 196, 26, 0.3)'
-                    }}>
-                      <span style={{ color: 'white', fontSize: '16px', fontWeight: 'bold' }}>✓</span>
-                    </div>
+                    {/* 移除右上角圆形元素（原勾选/分享等圆形图标） */}
 
                     {/* 视频信息 */}
                     <div style={{ marginBottom: '16px' }}>
@@ -561,7 +588,7 @@ const StepManager: React.FC<StepManagerProps> = ({
                         color: '#262626',
                         lineHeight: '1.4'
                       }}>
-                        {video.name}
+                        {(projectName ? `${projectName}_${String(index + 1).padStart(2, '0')}` : video.name)}
                       </h4>
                       <div style={{ fontSize: '12px', color: '#8c8c8c', lineHeight: '1.5' }}>
                         <div>生成时间: {video.createdAt ? new Date(video.createdAt).toLocaleString() : '刚刚'}</div>
@@ -685,7 +712,7 @@ const StepManager: React.FC<StepManagerProps> = ({
                           e.currentTarget.style.boxShadow = '0 2px 4px rgba(24, 144, 255, 0.2)';
                         }}
                       >
-                        🎥 预览视频
+                        预览视频
                       </button>
                       <button 
                         onClick={(e) => {
@@ -693,7 +720,8 @@ const StepManager: React.FC<StepManagerProps> = ({
                           if (video.url) {
                             const link = document.createElement('a');
                             const downloadUrl = video.url.includes("oss-proxy") ? video.url.replace(":8000", ":9999") + "&download=true" : video.url; link.href = downloadUrl;
-                            link.download = `${video.name}.mp4`;
+                            const displayName = projectName ? `${projectName}_${String(index + 1).padStart(2, '0')}` : (video.name || `video_${index + 1}`);
+                            link.download = `${displayName}.mp4`;
                             document.body.appendChild(link);
                             link.click();
                             document.body.removeChild(link);
@@ -723,30 +751,24 @@ const StepManager: React.FC<StepManagerProps> = ({
                           e.currentTarget.style.boxShadow = '0 2px 4px rgba(82, 196, 26, 0.2)';
                         }}
                       >
-                        📥 下载视频
+                        下载视频
                       </button>
                     </div>
                   </div>
                 ))}
               </div>
 
-              {/* 完成状态 */}
+              {/* 完成状态（去掉外框，仅保留简洁提示或完全隐藏外框） */}
               {generationProgress === 100 && generatedVideos.length > 0 && (
                 <div style={{
                   textAlign: 'center',
-                  padding: '20px',
-                  backgroundColor: '#f6ffed',
-                  border: '1px solid #b7eb8f',
-                  borderRadius: '8px',
-                  marginBottom: '20px'
+                  padding: 0,
+                  backgroundColor: 'transparent',
+                  border: 'none',
+                  borderRadius: 0,
+                  marginBottom: 0
                 }}>
-                  <div style={{ fontSize: '24px', marginBottom: '8px' }}>🎉</div>
-                  <h3 style={{ margin: 0, color: '#52c41a', fontSize: '16px' }}>
-                    所有视频生成完成！
-                  </h3>
-                  <p style={{ margin: '4px 0 0 0', color: '#666', fontSize: '14px' }}>
-                    共生成 {generatedVideos.length} 个视频，您可以预览和下载
-                  </p>
+                  <div style={{ fontSize: '0px', height: 0, overflow: 'hidden' }}></div>
                 </div>
               )}
             </div>
-- 
2.43.7

